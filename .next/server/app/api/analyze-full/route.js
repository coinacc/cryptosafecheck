"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze-full/route";
exports.ids = ["app/api/analyze-full/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-full%2Froute&page=%2Fapi%2Fanalyze-full%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-full%2Froute.js&appDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-full%2Froute&page=%2Fapi%2Fanalyze-full%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-full%2Froute.js&appDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_abu_CascadeProjects_scamapp_app_api_analyze_full_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/analyze-full/route.js */ \"(rsc)/./app/api/analyze-full/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze-full/route\",\n        pathname: \"/api/analyze-full\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze-full/route\"\n    },\n    resolvedPagePath: \"/home/abu/CascadeProjects/scamapp/app/api/analyze-full/route.js\",\n    nextConfigOutput,\n    userland: _home_abu_CascadeProjects_scamapp_app_api_analyze_full_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/analyze-full/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplLWZ1bGwlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFuYWx5emUtZnVsbCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFuYWx5emUtZnVsbCUyRnJvdXRlLmpzJmFwcERpcj0lMkZob21lJTJGYWJ1JTJGQ2FzY2FkZVByb2plY3RzJTJGc2NhbWFwcCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGaG9tZSUyRmFidSUyRkNhc2NhZGVQcm9qZWN0cyUyRnNjYW1hcHAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZTtBQUM1RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1zY2FtLWRldGVjdG9yLz8zNWZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL2FidS9DYXNjYWRlUHJvamVjdHMvc2NhbWFwcC9hcHAvYXBpL2FuYWx5emUtZnVsbC9yb3V0ZS5qc1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYW5hbHl6ZS1mdWxsL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZS1mdWxsXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXplLWZ1bGwvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvaG9tZS9hYnUvQ2FzY2FkZVByb2plY3RzL3NjYW1hcHAvYXBwL2FwaS9hbmFseXplLWZ1bGwvcm91dGUuanNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvYW5hbHl6ZS1mdWxsL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-full%2Froute&page=%2Fapi%2Fanalyze-full%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-full%2Froute.js&appDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze-full/route.js":
/*!***************************************!*\
  !*** ./app/api/analyze-full/route.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_gemini_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/gemini.js */ \"(rsc)/./app/lib/gemini.js\");\n\n\nasync function POST(request) {\n    try {\n        const { url, sessionId } = await request.json();\n        if (!url) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"URL is required\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`Analysis request for: ${url}`);\n        // Perform comprehensive analysis (no rate limits, no pre-checks)\n        const result = await (0,_lib_gemini_js__WEBPACK_IMPORTED_MODULE_1__.analyzeUrl)(url, sessionId);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(result);\n    } catch (error) {\n        console.error(\"Analysis error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Analysis failed\",\n            message: \"Unable to complete analysis. Please try again later.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FuYWx5emUtZnVsbC9yb3V0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkM7QUFDTTtBQUUxQyxlQUFlRSxLQUFLQyxPQUFPO0lBQ2hDLElBQUk7UUFDRixNQUFNLEVBQUVDLEdBQUcsRUFBRUMsU0FBUyxFQUFFLEdBQUcsTUFBTUYsUUFBUUcsSUFBSTtRQUU3QyxJQUFJLENBQUNGLEtBQUs7WUFDUixPQUFPSixrRkFBWUEsQ0FBQ00sSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQWtCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUN2RTtRQUVBQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxzQkFBc0IsRUFBRU4sSUFBSSxDQUFDO1FBRTFDLGlFQUFpRTtRQUNqRSxNQUFNTyxTQUFTLE1BQU1WLDBEQUFVQSxDQUFDRyxLQUFLQztRQUVyQyxPQUFPTCxrRkFBWUEsQ0FBQ00sSUFBSSxDQUFDSztJQUMzQixFQUFFLE9BQU9KLE9BQU87UUFDZEUsUUFBUUYsS0FBSyxDQUFDLG1CQUFtQkE7UUFDakMsT0FBT1Asa0ZBQVlBLENBQUNNLElBQUksQ0FBQztZQUN2QkMsT0FBTztZQUNQSyxTQUFTO1FBQ1gsR0FBRztZQUFFSixRQUFRO1FBQUk7SUFDbkI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1zY2FtLWRldGVjdG9yLy4vYXBwL2FwaS9hbmFseXplLWZ1bGwvcm91dGUuanM/NjQzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBhbmFseXplVXJsIH0gZnJvbSAnLi4vLi4vbGliL2dlbWluaS5qcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHVybCwgc2Vzc2lvbklkIH0gPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VSTCBpcyByZXF1aXJlZCcgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhgQW5hbHlzaXMgcmVxdWVzdCBmb3I6ICR7dXJsfWApO1xuXG4gICAgLy8gUGVyZm9ybSBjb21wcmVoZW5zaXZlIGFuYWx5c2lzIChubyByYXRlIGxpbWl0cywgbm8gcHJlLWNoZWNrcylcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXplVXJsKHVybCwgc2Vzc2lvbklkKTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FuYWx5c2lzIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgZXJyb3I6ICdBbmFseXNpcyBmYWlsZWQnLFxuICAgICAgbWVzc2FnZTogJ1VuYWJsZSB0byBjb21wbGV0ZSBhbmFseXNpcy4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nXG4gICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImFuYWx5emVVcmwiLCJQT1NUIiwicmVxdWVzdCIsInVybCIsInNlc3Npb25JZCIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJyZXN1bHQiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze-full/route.js\n");

/***/ }),

/***/ "(rsc)/./app/lib/analytics.js":
/*!******************************!*\
  !*** ./app/lib/analytics.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAnalytics: () => (/* binding */ getAnalytics),\n/* harmony export */   getRealTimeStats: () => (/* binding */ getRealTimeStats),\n/* harmony export */   trackApiUsage: () => (/* binding */ trackApiUsage)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n\n// Track API usage with real costs from AI\nasync function trackApiUsage(data) {\n    try {\n        const timestamp = new Date().toISOString();\n        const usageRecord = {\n            timestamp,\n            project: data.project || \"unknown\",\n            model: data.model || \"gemini-2.5-flash-lite-preview-06-17\",\n            inputTokens: data.inputTokens || 0,\n            outputTokens: data.outputTokens || 0,\n            totalTokens: (data.inputTokens || 0) + (data.outputTokens || 0),\n            responseTime: data.responseTime || 0,\n            cost: data.realCostUSD || null,\n            costSource: data.realCostUSD ? \"ai_provided\" : \"not_provided\",\n            cached: data.cached || false,\n            success: data.success !== false,\n            error: data.error || null,\n            userAgent: data.userAgent || null,\n            ip: data.ip || null,\n            scanType: data.scanType || \"full\"\n        };\n        // Store in KV with a unique key\n        const key = `analytics:${timestamp}:${Math.random().toString(36).substr(2, 9)}`;\n        await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.set(key, usageRecord, {\n            ex: 60 * 60 * 24 * 30\n        }); // Keep for 30 days\n        // Also update daily summary\n        const today = new Date().toISOString().split(\"T\")[0];\n        const dailyKey = `daily:${today}`;\n        const existingDaily = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(dailyKey) || {\n            date: today,\n            totalRequests: 0,\n            totalTokens: 0,\n            totalCost: 0,\n            cachedRequests: 0,\n            errors: 0,\n            avgResponseTime: 0,\n            basicScans: 0,\n            fullScans: 0\n        };\n        existingDaily.totalRequests += 1;\n        existingDaily.totalTokens += usageRecord.totalTokens;\n        existingDaily.totalCost += usageRecord.cost || 0; // Handle null costs\n        if (usageRecord.cached) existingDaily.cachedRequests += 1;\n        if (!usageRecord.success) existingDaily.errors += 1;\n        if (usageRecord.scanType === \"basic\") existingDaily.basicScans += 1;\n        if (usageRecord.scanType === \"full\") existingDaily.fullScans += 1;\n        existingDaily.avgResponseTime = (existingDaily.avgResponseTime * (existingDaily.totalRequests - 1) + usageRecord.responseTime) / existingDaily.totalRequests;\n        await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.set(dailyKey, existingDaily, {\n            ex: 60 * 60 * 24 * 90\n        }); // Keep daily summaries for 90 days\n        console.log(\"Analytics tracked:\", usageRecord);\n    } catch (error) {\n        console.error(\"Failed to track analytics:\", error);\n    }\n}\n// Note: Cost calculation removed - now using real costs provided directly by AI\n// If AI doesn't provide cost data, we show \"not provided\" in analytics\n// Get analytics data for dashboard\nasync function getAnalytics(days = 30) {\n    try {\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        // Get daily summaries\n        const dailyData = [];\n        for(let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)){\n            const dateStr = d.toISOString().split(\"T\")[0];\n            const dailyKey = `daily:${dateStr}`;\n            const data = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(dailyKey);\n            if (data) {\n                dailyData.push(data);\n            }\n        }\n        // Get recent individual requests\n        const keys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.keys(\"analytics:*\");\n        const recentKeys = keys.sort((a, b)=>b.localeCompare(a)).slice(0, 100); // Get last 100 requests\n        const recentRequests = [];\n        for (const key of recentKeys){\n            const data = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(key);\n            if (data) {\n                recentRequests.push(data);\n            }\n        }\n        // Calculate totals\n        const totals = dailyData.reduce((acc, day)=>({\n                totalRequests: acc.totalRequests + day.totalRequests,\n                totalTokens: acc.totalTokens + day.totalTokens,\n                totalCost: acc.totalCost + day.totalCost,\n                cachedRequests: acc.cachedRequests + day.cachedRequests,\n                errors: acc.errors + day.errors\n            }), {\n            totalRequests: 0,\n            totalTokens: 0,\n            totalCost: 0,\n            cachedRequests: 0,\n            errors: 0\n        });\n        return {\n            dailyData,\n            recentRequests,\n            totals,\n            period: {\n                startDate: startDate.toISOString().split(\"T\")[0],\n                endDate: endDate.toISOString().split(\"T\")[0],\n                days\n            }\n        };\n    } catch (error) {\n        console.error(\"Failed to get analytics:\", error);\n        return null;\n    }\n}\n// Get real-time stats - now uses the same data source as main analytics for consistency\nasync function getRealTimeStats() {\n    try {\n        const today = new Date().toISOString().split(\"T\")[0];\n        const defaultStats = {\n            totalRequests: 0,\n            totalTokens: 0,\n            totalCost: 0,\n            cachedRequests: 0,\n            errors: 0,\n            avgResponseTime: 0\n        };\n        let todayStats = defaultStats;\n        // First, try to get today's data directly from daily summary\n        const dailyKey = `daily:${today}`;\n        const todayData = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(dailyKey);\n        if (todayData) {\n            todayStats = todayData;\n        } else {\n            // If no daily summary exists, calculate from recent requests\n            const keys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.keys(\"analytics:*\");\n            const recentKeys = keys.sort((a, b)=>b.localeCompare(a)).slice(0, 100); // Get last 100 requests\n            const recentRequests = [];\n            for (const key of recentKeys){\n                const data = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(key);\n                if (data) {\n                    recentRequests.push(data);\n                }\n            }\n            // Count requests from today\n            const todayRequests = recentRequests.filter((req)=>{\n                const reqDate = new Date(req.timestamp).toISOString().split(\"T\")[0];\n                return reqDate === today;\n            });\n            if (todayRequests.length > 0) {\n                todayStats = {\n                    totalRequests: todayRequests.length,\n                    totalTokens: todayRequests.reduce((sum, req)=>sum + (req.totalTokens || 0), 0),\n                    totalCost: todayRequests.reduce((sum, req)=>sum + (req.cost || 0), 0),\n                    cachedRequests: todayRequests.filter((req)=>req.cached).length,\n                    errors: todayRequests.filter((req)=>!req.success).length,\n                    avgResponseTime: todayRequests.length > 0 ? todayRequests.reduce((sum, req)=>sum + (req.responseTime || 0), 0) / todayRequests.length : 0\n                };\n            }\n        }\n        // Calculate last hour activity from recent requests\n        let lastHourRequests = 0;\n        const keys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.keys(\"analytics:*\");\n        const recentKeys = keys.sort((a, b)=>b.localeCompare(a)).slice(0, 100);\n        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();\n        for (const key of recentKeys){\n            const data = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(key);\n            if (data && data.timestamp > oneHourAgo) {\n                lastHourRequests++;\n            }\n        }\n        return {\n            today: todayStats,\n            lastHour: lastHourRequests,\n            cacheHitRate: todayStats.totalRequests > 0 ? (todayStats.cachedRequests / todayStats.totalRequests * 100).toFixed(1) : 0,\n            errorRate: todayStats.totalRequests > 0 ? (todayStats.errors / todayStats.totalRequests * 100).toFixed(1) : 0\n        };\n    } catch (error) {\n        console.error(\"Failed to get real-time stats:\", error);\n        return {\n            today: {\n                totalRequests: 0,\n                totalTokens: 0,\n                totalCost: 0,\n                cachedRequests: 0,\n                errors: 0,\n                avgResponseTime: 0\n            },\n            lastHour: 0,\n            cacheHitRate: 0,\n            errorRate: 0\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/analytics.js\n");

/***/ }),

/***/ "(rsc)/./app/lib/cache.js":
/*!**************************!*\
  !*** ./app/lib/cache.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCachedAnalysis: () => (/* binding */ clearCachedAnalysis),\n/* harmony export */   getCacheStats: () => (/* binding */ getCacheStats),\n/* harmony export */   getCachedAnalysis: () => (/* binding */ getCachedAnalysis),\n/* harmony export */   setCachedAnalysis: () => (/* binding */ setCachedAnalysis)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Cache configuration\nconst CACHE_TTL = 60 * 60 * 24; // 24 hours in seconds\nconst CACHE_PREFIX = \"aicryptocheck:\";\n/**\n * Generate a cache key for a given URL/input\n */ function generateCacheKey(input, scanType = \"full\") {\n    // Normalize the input (lowercase, trim)\n    const normalized = input.toLowerCase().trim();\n    // Create a hash for consistent key generation\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(normalized).digest(\"hex\");\n    return `${CACHE_PREFIX}${scanType}:${hash}`;\n}\n/**\n * Get cached analysis result\n */ async function getCachedAnalysis(input, scanType = \"full\") {\n    try {\n        const cacheKey = generateCacheKey(input, scanType);\n        const cached = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.get(cacheKey);\n        if (cached) {\n            console.log(`Cache HIT for: ${input} (${scanType})`);\n            console.log(`🔍 Cached data red_flags count: ${cached.red_flags?.length || 0}`);\n            console.log(`🔍 Cached data community_warnings count: ${cached.community_warnings?.length || 0}`);\n            console.log(`🔍 Cached at: ${cached._cachedAt}`);\n            return cached;\n        }\n        console.log(`Cache MISS for: ${input} (${scanType})`);\n        return null;\n    } catch (error) {\n        console.error(\"Cache read error:\", error);\n        return null; // Fail gracefully\n    }\n}\n/**\n * Store analysis result in cache\n */ async function setCachedAnalysis(input, result, scanType = \"full\") {\n    try {\n        const cacheKey = generateCacheKey(input, scanType);\n        // Add cache metadata\n        const cacheData = {\n            ...result,\n            _cached: true,\n            _cachedAt: new Date().toISOString(),\n            _input: input,\n            _scanType: scanType\n        };\n        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(cacheKey, cacheData, {\n            ex: CACHE_TTL\n        });\n        console.log(`Cached analysis for: ${input} (${scanType})`);\n    } catch (error) {\n        console.error(\"Cache write error:\", error);\n    // Don't throw - caching is optional\n    }\n}\n/**\n * Clear cache for a specific input (useful for debugging)\n */ async function clearCachedAnalysis(input) {\n    try {\n        const cacheKey = generateCacheKey(input);\n        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(cacheKey);\n        console.log(`Cleared cache for: ${input}`);\n    } catch (error) {\n        console.error(\"Cache clear error:\", error);\n    }\n}\n/**\n * Get cache statistics (useful for monitoring)\n */ async function getCacheStats() {\n    try {\n        const keys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.keys(`${CACHE_PREFIX}*`);\n        return {\n            totalCachedItems: keys.length,\n            cachePrefix: CACHE_PREFIX,\n            ttl: CACHE_TTL\n        };\n    } catch (error) {\n        console.error(\"Cache stats error:\", error);\n        return {\n            error: \"Unable to fetch cache stats\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1lBQ0xvQyxrQkFBa0JELEtBQUtqQixNQUFNO1lBQzdCbUIsYUFBYXJDO1lBQ2JzQyxLQUFLdkM7UUFDUDtJQUNGLEVBQUUsT0FBT3NCLE9BQU87UUFDZE4sUUFBUU0sS0FBSyxDQUFDLHNCQUFzQkE7UUFDcEMsT0FBTztZQUFFQSxPQUFPO1FBQThCO0lBQ2hEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnlwdG8tc2NhbS1kZXRlY3Rvci8uL2FwcC9saWIvY2FjaGUuanM/Nzk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrdiB9IGZyb20gJ0B2ZXJjZWwva3YnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG4vLyBDYWNoZSBjb25maWd1cmF0aW9uXG5jb25zdCBDQUNIRV9UVEwgPSA2MCAqIDYwICogMjQ7IC8vIDI0IGhvdXJzIGluIHNlY29uZHNcbmNvbnN0IENBQ0hFX1BSRUZJWCA9ICdhaWNyeXB0b2NoZWNrOic7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBjYWNoZSBrZXkgZm9yIGEgZ2l2ZW4gVVJML2lucHV0XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlQ2FjaGVLZXkoaW5wdXQsIHNjYW5UeXBlID0gJ2Z1bGwnKSB7XG4gIC8vIE5vcm1hbGl6ZSB0aGUgaW5wdXQgKGxvd2VyY2FzZSwgdHJpbSlcbiAgY29uc3Qgbm9ybWFsaXplZCA9IGlucHV0LnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuXG4gIC8vIENyZWF0ZSBhIGhhc2ggZm9yIGNvbnNpc3RlbnQga2V5IGdlbmVyYXRpb25cbiAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUobm9ybWFsaXplZCkuZGlnZXN0KCdoZXgnKTtcblxuICByZXR1cm4gYCR7Q0FDSEVfUFJFRklYfSR7c2NhblR5cGV9OiR7aGFzaH1gO1xufVxuXG4vKipcbiAqIEdldCBjYWNoZWQgYW5hbHlzaXMgcmVzdWx0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYWNoZWRBbmFseXNpcyhpbnB1dCwgc2NhblR5cGUgPSAnZnVsbCcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGdlbmVyYXRlQ2FjaGVLZXkoaW5wdXQsIHNjYW5UeXBlKTtcbiAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCBrdi5nZXQoY2FjaGVLZXkpO1xuXG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgY29uc29sZS5sb2coYENhY2hlIEhJVCBmb3I6ICR7aW5wdXR9ICgke3NjYW5UeXBlfSlgKTtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNIENhY2hlZCBkYXRhIHJlZF9mbGFncyBjb3VudDogJHtjYWNoZWQucmVkX2ZsYWdzPy5sZW5ndGggfHwgMH1gKTtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNIENhY2hlZCBkYXRhIGNvbW11bml0eV93YXJuaW5ncyBjb3VudDogJHtjYWNoZWQuY29tbXVuaXR5X3dhcm5pbmdzPy5sZW5ndGggfHwgMH1gKTtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNIENhY2hlZCBhdDogJHtjYWNoZWQuX2NhY2hlZEF0fWApO1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhgQ2FjaGUgTUlTUyBmb3I6ICR7aW5wdXR9ICgke3NjYW5UeXBlfSlgKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdDYWNoZSByZWFkIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDsgLy8gRmFpbCBncmFjZWZ1bGx5XG4gIH1cbn1cblxuLyoqXG4gKiBTdG9yZSBhbmFseXNpcyByZXN1bHQgaW4gY2FjaGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldENhY2hlZEFuYWx5c2lzKGlucHV0LCByZXN1bHQsIHNjYW5UeXBlID0gJ2Z1bGwnKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBnZW5lcmF0ZUNhY2hlS2V5KGlucHV0LCBzY2FuVHlwZSk7XG5cbiAgICAvLyBBZGQgY2FjaGUgbWV0YWRhdGFcbiAgICBjb25zdCBjYWNoZURhdGEgPSB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICBfY2FjaGVkOiB0cnVlLFxuICAgICAgX2NhY2hlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBfaW5wdXQ6IGlucHV0LFxuICAgICAgX3NjYW5UeXBlOiBzY2FuVHlwZVxuICAgIH07XG5cbiAgICBhd2FpdCBrdi5zZXQoY2FjaGVLZXksIGNhY2hlRGF0YSwgeyBleDogQ0FDSEVfVFRMIH0pO1xuICAgIGNvbnNvbGUubG9nKGBDYWNoZWQgYW5hbHlzaXMgZm9yOiAke2lucHV0fSAoJHtzY2FuVHlwZX0pYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignQ2FjaGUgd3JpdGUgZXJyb3I6JywgZXJyb3IpO1xuICAgIC8vIERvbid0IHRocm93IC0gY2FjaGluZyBpcyBvcHRpb25hbFxuICB9XG59XG5cbi8qKlxuICogQ2xlYXIgY2FjaGUgZm9yIGEgc3BlY2lmaWMgaW5wdXQgKHVzZWZ1bCBmb3IgZGVidWdnaW5nKVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYXJDYWNoZWRBbmFseXNpcyhpbnB1dCkge1xuICB0cnkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZ2VuZXJhdGVDYWNoZUtleShpbnB1dCk7XG4gICAgYXdhaXQga3YuZGVsKGNhY2hlS2V5KTtcbiAgICBjb25zb2xlLmxvZyhgQ2xlYXJlZCBjYWNoZSBmb3I6ICR7aW5wdXR9YCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignQ2FjaGUgY2xlYXIgZXJyb3I6JywgZXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogR2V0IGNhY2hlIHN0YXRpc3RpY3MgKHVzZWZ1bCBmb3IgbW9uaXRvcmluZylcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhY2hlU3RhdHMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qga2V5cyA9IGF3YWl0IGt2LmtleXMoYCR7Q0FDSEVfUFJFRklYfSpgKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxDYWNoZWRJdGVtczoga2V5cy5sZW5ndGgsXG4gICAgICBjYWNoZVByZWZpeDogQ0FDSEVfUFJFRklYLFxuICAgICAgdHRsOiBDQUNIRV9UVExcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0NhY2hlIHN0YXRzIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4geyBlcnJvcjogJ1VuYWJsZSB0byBmZXRjaCBjYWNoZSBzdGF0cycgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImt2IiwiY3J5cHRvIiwiQ0FDSEVfVFRMIiwiQ0FDSEVfUFJFRklYIiwiZ2VuZXJhdGVDYWNoZUtleSIsImlucHV0Iiwic2NhblR5cGUiLCJub3JtYWxpemVkIiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiaGFzaCIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJnZXRDYWNoZWRBbmFseXNpcyIsImNhY2hlS2V5IiwiY2FjaGVkIiwiZ2V0IiwiY29uc29sZSIsImxvZyIsInJlZF9mbGFncyIsImxlbmd0aCIsImNvbW11bml0eV93YXJuaW5ncyIsIl9jYWNoZWRBdCIsImVycm9yIiwic2V0Q2FjaGVkQW5hbHlzaXMiLCJyZXN1bHQiLCJjYWNoZURhdGEiLCJfY2FjaGVkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiX2lucHV0IiwiX3NjYW5UeXBlIiwic2V0IiwiZXgiLCJjbGVhckNhY2hlZEFuYWx5c2lzIiwiZGVsIiwiZ2V0Q2FjaGVTdGF0cyIsImtleXMiLCJ0b3RhbENhY2hlZEl0ZW1zIiwiY2FjaGVQcmVmaXgiLCJ0dGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./app/lib/gemini.js":
/*!***************************!*\
  !*** ./app/lib/gemini.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeUrl: () => (/* binding */ analyzeUrl),\n/* harmony export */   registerProgressCallback: () => (/* binding */ registerProgressCallback),\n/* harmony export */   unregisterProgressCallback: () => (/* binding */ unregisterProgressCallback)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache.js */ \"(rsc)/./app/lib/cache.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./analytics.js */ \"(rsc)/./app/lib/analytics.js\");\n\n\n\n// Initialize Gemini AI\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(\"AIzaSyCs4ZddMjbyELWo630NZ2aPxdONNPCBdow\");\nconst model = genAI.getGenerativeModel({\n    model: \"gemini-2.5-flash-lite-preview-06-17\",\n    generationConfig: {\n        temperature: 0.1,\n        maxOutputTokens: 8192\n    }\n});\n// Progress tracking for SSE\nconst progressCallbacks = new Map();\nfunction registerProgressCallback(sessionId, callback) {\n    progressCallbacks.set(sessionId, callback);\n}\nfunction unregisterProgressCallback(sessionId) {\n    progressCallbacks.delete(sessionId);\n}\nfunction sendProgress(sessionId, message, status = \"in_progress\") {\n    const callback = progressCallbacks.get(sessionId);\n    if (callback) {\n        callback({\n            message,\n            status\n        });\n    }\n}\n// Helper function to clean citation tags from text\nfunction cleanCitationTags(text) {\n    if (!text) return \"\";\n    return text.replace(/\\【\\d+:\\d+†[^\\】]*\\】/g, \"\").trim();\n}\n// Helper function to clean string arrays\nfunction cleanStringArray(arr) {\n    if (!Array.isArray(arr)) return [];\n    return arr.map((item)=>cleanCitationTags(item)).filter((item)=>item.length > 0);\n}\n// Helper function to clean sources array\nfunction cleanSources(sources) {\n    if (!Array.isArray(sources)) return [];\n    return sources.map((source)=>({\n            name: cleanCitationTags(source.name || \"\"),\n            url: source.url || null\n        })).filter((source)=>source.name.length > 0);\n}\n// Main analysis function - comprehensive crypto project analysis\nconst analyzeUrl = async (userInput, sessionId = null)=>{\n    const startTime = Date.now();\n    let cached = false;\n    // Check KV cache first\n    const cachedResult = await (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__.getCachedAnalysis)(userInput, \"full\");\n    if (cachedResult) {\n        cached = true;\n        console.log(`🎯 Cache HIT for analysis: ${userInput}`);\n        // Track cached request\n        await (0,_analytics_js__WEBPACK_IMPORTED_MODULE_2__.trackApiUsage)({\n            project: userInput,\n            responseTime: Date.now() - startTime,\n            cached: true,\n            success: true,\n            scanType: \"full\"\n        });\n        return cachedResult;\n    }\n    console.log(`🚀 Starting fresh analysis for: ${userInput} (cache miss)`);\n    // Send initial progress update\n    if (sessionId) {\n        sendProgress(sessionId, \"\\uD83D\\uDD0D Starting comprehensive analysis...\", \"in_progress\");\n    }\n    // Optimized system prompt for crypto project analysis\n    const prompt = `Analyze \"${userInput}\" as a crypto project analyst. Search for real-time data and return only JSON.\n\n### ANALYSIS PROCESS ###\n1. **IDENTIFY**: Determine if input is project name, ticker, contract address, or URL\n2. **SEARCH**: Prioritize official sites → CoinGecko/CMC → GitHub → social media → regulatory sources\n3. **EVALUATE**: Rate each category using search results only (not training data)\n4. **RETURN**: JSON only, no other text\n\n### RULES ###\n- Bitcoin/Ethereum base layers = VERY_SAFE\n- No crypto project = {\"status\": \"not_applicable\"}\n- Missing data = use most conservative rating + note in explanation\n- Base analysis on search results only\n\n### RATING SCALES ###\n**team_transparency**: VERIFIED → PARTIAL → PSEUDONYMOUS → ANONYMOUS → FAKE\n**technical_security**: AUDITED → PARTIALLY_AUDITED → UNAUDITED → FAILED_AUDIT → BACKDOOR_DETECTED  \n**legal_regulatory**: COMPLIANT → UNCLEAR → UNREGISTERED → CEASE_AND_DESIST → CRIMINAL_CHARGES\n**financial_transparency**: TRANSPARENT → PARTIAL → CONCERNING → PONZI_STRUCTURE → RUG_PULL_RISK\n**community_marketing**: ORGANIC → SHILLED → FAKE_FOLLOWERS → PUMP_SCHEME → CULT_LIKE\n**product_delivery**: DELIVERED → DELAYED → VAPORWARE → PLAGIARIZED → IMPOSSIBLE\n\n**safety_level**: VERY_SAFE (established, audited, verified) → SAFE (good transparency, minimal flags) → RISKY (some concerns) → DANGEROUS (clear scam indicators)\n**confidence**: HIGH (ample data) → MEDIUM (partial data) → LOW (minimal data)\n\n### JSON FORMAT ###\n{\n  \"status\": \"analyzed\",\n  \"project_name\": \"string\",\n  \"project_type\": \"string\",\n  \"blockchain_network\": \"string\", \n  \"token_symbol\": \"string|null\",\n  \"safety_level\": \"VERY_SAFE|SAFE|RISKY|DANGEROUS\",\n  \"confidence\": \"HIGH|MEDIUM|LOW\",\n  \"team_transparency\": \"VERIFIED|PARTIAL|PSEUDONYMOUS|ANONYMOUS|FAKE\",\n  \"team_transparency_explanation\": \"1-2 sentences with findings\",\n  \"technical_security\": \"AUDITED|PARTIALLY_AUDITED|UNAUDITED|FAILED_AUDIT|BACKDOOR_DETECTED\",\n  \"technical_security_explanation\": \"1-2 sentences with findings\", \n  \"legal_regulatory\": \"COMPLIANT|UNCLEAR|UNREGISTERED|CEASE_AND_DESIST|CRIMINAL_CHARGES\",\n  \"legal_regulatory_explanation\": \"1-2 sentences with findings\",\n  \"financial_transparency\": \"TRANSPARENT|PARTIAL|CONCERNING|PONZI_STRUCTURE|RUG_PULL_RISK\", \n  \"financial_transparency_explanation\": \"1-2 sentences with findings\",\n  \"community_marketing\": \"ORGANIC|SHILLED|FAKE_FOLLOWERS|PUMP_SCHEME|CULT_LIKE\",\n  \"community_marketing_explanation\": \"1-2 sentences with findings\",\n  \"product_delivery\": \"DELIVERED|DELAYED|VAPORWARE|PLAGIARIZED|IMPOSSIBLE\",\n  \"product_delivery_explanation\": \"1-2 sentences with findings\",\n  \"exchange_listings\": [\"string\"],\n  \"scam_type_indicators\": [\"string\"],\n  \"community_warnings\": [\"string\"], \n  \"red_flags\": [\"string\"],\n  \"positive_signals\": [\"string\"],\n  \"risk_summary\": \"1-2 sentence summary of primary risks\",\n  \"sources_used\": [{\"name\":\"string\",\"url\":\"string|null\"}]\n}`;\n    let response;\n    let apiResult;\n    let apiSuccess = true;\n    let apiError = null;\n    try {\n        // Send AI analysis progress update\n        if (sessionId) {\n            sendProgress(sessionId, \"\\uD83E\\uDDE0 AI analyzing project...\", \"in_progress\");\n        }\n        console.log(\"\\uD83E\\uDD16 Sending prompt to Gemini for analysis...\");\n        console.log(\"\\uD83D\\uDCCA Prompt length:\", prompt.length, \"characters\");\n        apiResult = await model.generateContent(prompt);\n        response = apiResult.response;\n        console.log(\"✅ Gemini response received\");\n        console.log(\"\\uD83D\\uDCCA Response metadata:\", {\n            apiResultUsageMetadata: apiResult?.usageMetadata,\n            responseUsageMetadata: response?.usageMetadata,\n            candidates: response?.candidates?.length || 0,\n            finishReason: response?.candidates?.[0]?.finishReason,\n            safetyRatings: response?.candidates?.[0]?.safetyRatings\n        });\n    } catch (error) {\n        apiSuccess = false;\n        apiError = error.message;\n        console.error(\"\\uD83D\\uDEA8 Error in Gemini API call:\", error);\n        console.log(`❌ Analysis failed for: ${userInput}`);\n        throw error;\n    }\n    // Parse JSON response\n    let result;\n    try {\n        // Get text content from Gemini response\n        const allTextContent = response.text();\n        console.log(\"\\uD83D\\uDCDD Response length:\", allTextContent?.length || 0, \"characters\");\n        console.log(\"Gemini response:\", allTextContent?.substring(0, 1000) + (allTextContent?.length > 1000 ? \"...\" : \"\"));\n        // Parse Gemini's JSON response\n        let geminiResult;\n        try {\n            geminiResult = JSON.parse(allTextContent.trim());\n        } catch (parseError) {\n            console.log(\"Initial JSON parse failed, trying to extract and clean JSON...\");\n            // First try to remove markdown code blocks\n            let cleanedText = allTextContent;\n            if (cleanedText.includes(\"```json\")) {\n                cleanedText = cleanedText.replace(/```json\\s*/g, \"\").replace(/```\\s*$/g, \"\");\n            }\n            // Try parsing the cleaned text\n            try {\n                geminiResult = JSON.parse(cleanedText.trim());\n            } catch (secondParseError) {\n                // Look for JSON object in the response\n                const jsonRegex = /\\{[\\s\\S]*\\}/;\n                const match = cleanedText.match(jsonRegex);\n                if (match) {\n                    try {\n                        // Try parsing the extracted JSON directly first\n                        geminiResult = JSON.parse(match[0]);\n                    } catch (thirdParseError) {\n                        // If that fails, clean up the JSON string values\n                        let cleanedJson = match[0];\n                        // Fix common JSON issues in string values\n                        cleanedJson = cleanedJson.replace(/\"([^\"]*?)\"/g, (match, content)=>{\n                            // Only clean content inside string values, not keys\n                            if (content.includes(\"\\n\") || content.includes(\"\\r\") || content.includes(\"\t\")) {\n                                const cleaned = content.replace(/\\n/g, \" \") // Replace newlines with spaces\n                                .replace(/\\r/g, \" \") // Replace carriage returns with spaces\n                                .replace(/\\t/g, \" \") // Replace tabs with spaces\n                                .replace(/\\s+/g, \" \") // Collapse multiple spaces\n                                .trim();\n                                return `\"${cleaned}\"`;\n                            }\n                            return match;\n                        });\n                        try {\n                            geminiResult = JSON.parse(cleanedJson);\n                        } catch (fourthParseError) {\n                            console.error(\"Failed to parse cleaned JSON:\", fourthParseError);\n                            console.error(\"Raw response:\", allTextContent);\n                            throw new Error(\"Could not parse JSON from Gemini response\");\n                        }\n                    }\n                } else {\n                    // Check if response was truncated due to MAX_TOKENS\n                    const finishReason = response?.candidates?.[0]?.finishReason;\n                    if (finishReason === \"MAX_TOKENS\") {\n                        console.log(\"⚠️ Response truncated due to MAX_TOKENS, attempting to fix incomplete JSON...\");\n                        // Try to fix truncated JSON by adding missing closing braces\n                        let truncatedJson = cleanedText.trim();\n                        // Count opening and closing braces\n                        const openBraces = (truncatedJson.match(/\\{/g) || []).length;\n                        const closeBraces = (truncatedJson.match(/\\}/g) || []).length;\n                        const missingBraces = openBraces - closeBraces;\n                        if (missingBraces > 0) {\n                            // Add missing closing braces\n                            truncatedJson += \"}\" + \"}\".repeat(missingBraces - 1);\n                            console.log(`🔧 Added ${missingBraces} missing closing braces`);\n                            try {\n                                geminiResult = JSON.parse(truncatedJson);\n                                console.log(\"✅ Successfully parsed truncated JSON after fixing\");\n                            } catch (fixError) {\n                                console.error(\"❌ Failed to fix truncated JSON:\", fixError);\n                                throw new Error(\"Response truncated and could not be repaired\");\n                            }\n                        } else {\n                            throw new Error(\"Response truncated but no missing braces found\");\n                        }\n                    } else {\n                        console.error(\"No JSON found in Gemini response:\", allTextContent);\n                        throw new Error(\"No JSON found in Gemini response\");\n                    }\n                }\n            }\n        }\n        // Handle \"not_applicable\" status for non-crypto projects\n        if (geminiResult.status === \"not_applicable\") {\n            return {\n                category: \"UTILITY_TOOL\",\n                riskScore: 0,\n                riskLevel: \"low\",\n                confidence: 95,\n                summary: \"This website is not a cryptocurrency/blockchain investment project requiring scam analysis.\",\n                findings: [\n                    \"Not a cryptocurrency investment project\"\n                ],\n                redFlags: [],\n                positiveSignals: [\n                    \"Outside scope of crypto scam detection\"\n                ],\n                riskBreakdown: {\n                    technical: 0,\n                    team: 0,\n                    marketing: 0,\n                    legal: 0\n                }\n            };\n        }\n        // Pass through the new detailed format directly to the frontend\n        result = {\n            // Keep the detailed format from Gemini but clean citation tags\n            ...geminiResult,\n            // Clean citation tags from ALL text fields and arrays\n            risk_summary: cleanCitationTags(geminiResult.risk_summary || \"\"),\n            project_name: cleanCitationTags(geminiResult.project_name || \"\"),\n            positive_signals: cleanStringArray(geminiResult.positive_signals || []),\n            red_flags: cleanStringArray(geminiResult.red_flags || []),\n            scam_type_indicators: cleanStringArray(geminiResult.scam_type_indicators || []),\n            community_warnings: cleanStringArray(geminiResult.community_warnings || []),\n            sources_used: cleanSources(geminiResult.sources_used || []),\n            // Add legacy fields for backward compatibility\n            category: geminiResult.safety_level === \"DANGEROUS\" ? \"SCAM\" : geminiResult.safety_level === \"RISKY\" ? \"POTENTIAL_SCAM\" : \"LEGITIMATE_PROJECT\",\n            riskScore: geminiResult.safety_level === \"VERY_SAFE\" ? 10 : geminiResult.safety_level === \"SAFE\" ? 25 : geminiResult.safety_level === \"RISKY\" ? 65 : geminiResult.safety_level === \"DANGEROUS\" ? 90 : 50,\n            riskLevel: geminiResult.safety_level === \"VERY_SAFE\" || geminiResult.safety_level === \"SAFE\" ? \"low\" : geminiResult.safety_level === \"RISKY\" ? \"medium\" : \"high\",\n            confidence: geminiResult.confidence === \"HIGH\" ? 90 : geminiResult.confidence === \"MEDIUM\" ? 70 : 50,\n            summary: cleanCitationTags(geminiResult.risk_summary || \"Analysis completed\"),\n            findings: cleanStringArray([\n                ...geminiResult.positive_signals || [],\n                `Project Type: ${geminiResult.project_type || \"Unknown\"}`,\n                `Team Transparency: ${geminiResult.team_transparency || \"Unknown\"}`,\n                `Audit Status: ${geminiResult.technical_security || \"Unknown\"}`,\n                ...geminiResult.exchange_listings?.length > 0 ? [\n                    `Listed on: ${geminiResult.exchange_listings.join(\", \")}`\n                ] : []\n            ]),\n            redFlags: cleanStringArray([\n                ...geminiResult.red_flags || [],\n                ...geminiResult.scam_type_indicators || [],\n                ...geminiResult.community_warnings || []\n            ]),\n            positiveSignals: cleanStringArray(geminiResult.positive_signals || []),\n            riskBreakdown: {\n                technical: geminiResult.safety_level === \"DANGEROUS\" ? 90 : 50,\n                team: geminiResult.team_transparency === \"FAKE\" || geminiResult.team_transparency === \"ANONYMOUS\" ? 90 : 50,\n                marketing: geminiResult.scam_type_indicators?.length > 0 ? 90 : 50,\n                legal: geminiResult.community_warnings?.length > 0 ? 90 : 50\n            }\n        };\n        // Validate response structure\n        if (!result.summary) {\n            throw new Error(\"Invalid response structure from Gemini\");\n        }\n    } catch (error) {\n        console.error(\"Failed to parse Gemini response:\", error);\n        console.error(\"Raw response:\", response?.text?.() || \"No response text\");\n        console.log(`❌ Analysis parsing failed for: ${userInput}`);\n        // Fallback response\n        result = {\n            category: \"LEGITIMATE_PROJECT\",\n            riskScore: 50,\n            riskLevel: \"medium\",\n            confidence: 30,\n            summary: \"Unable to analyze this project due to a technical issue. Please try again later.\",\n            findings: [\n                \"Analysis temporarily unavailable\"\n            ],\n            redFlags: [],\n            positiveSignals: [],\n            riskBreakdown: {\n                technical: 50,\n                team: 50,\n                marketing: 50,\n                legal: 50\n            }\n        };\n    }\n    // Cache the analysis result in KV\n    await (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__.setCachedAnalysis)(userInput, result, \"full\");\n    // Calculate cost using official Gemini 2.5 Flash Lite pricing\n    // Try both response and apiResult objects for usageMetadata\n    const inputTokens = response?.usageMetadata?.promptTokenCount || apiResult?.usageMetadata?.promptTokenCount || 0;\n    const outputTokens = response?.usageMetadata?.candidatesTokenCount || apiResult?.usageMetadata?.candidatesTokenCount || 0;\n    // Official pricing: $0.10 per 1M input tokens, $0.40 per 1M output tokens\n    let calculatedCost = null;\n    if (inputTokens > 0 || outputTokens > 0) {\n        const inputCost = inputTokens / 1000000 * 0.10;\n        const outputCost = outputTokens / 1000000 * 0.40;\n        calculatedCost = inputCost + outputCost;\n        console.log(`💰 Cost calculation:`, {\n            inputTokens,\n            outputTokens,\n            inputCost: inputCost.toFixed(6),\n            outputCost: outputCost.toFixed(6),\n            totalCost: calculatedCost.toFixed(6)\n        });\n    }\n    // Track API usage with calculated cost\n    await (0,_analytics_js__WEBPACK_IMPORTED_MODULE_2__.trackApiUsage)({\n        project: userInput,\n        model: \"gemini-2.5-flash-lite-preview-06-17\",\n        inputTokens: inputTokens,\n        outputTokens: outputTokens,\n        realCostUSD: calculatedCost,\n        responseTime: Date.now() - startTime,\n        cached: cached,\n        success: apiSuccess,\n        error: apiError,\n        scanType: \"full\"\n    });\n    console.log(`✅ Analysis completed for: ${userInput}`);\n    // Send completion progress updates\n    if (sessionId) {\n        sendProgress(sessionId, \"✅ Analysis complete!\", \"complete\");\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/gemini.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@upstash","vendor-chunks/@vercel","vendor-chunks/uncrypto","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-full%2Froute&page=%2Fapi%2Fanalyze-full%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-full%2Froute.js&appDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fabu%2FCascadeProjects%2Fscamapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();